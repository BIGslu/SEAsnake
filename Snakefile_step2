configfile: 'config/test_config.yaml'

## INPUTS
TRIM1 = expand('result/1_trim/{samples}_R1_trim.fastq.gz', samples=config["SampleList"])
TRIM2 = expand('result/1_trim/{samples}_R2_trim.fastq.gz', samples=config["SampleList"])
SUFFIX = ["R1_trim", "R2_trim"]
QC_trim_html = expand("result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.html", samples=config["SampleList"], suf=SUFFIX)
QC_trim_zip = expand("result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.zip", samples=config["SampleList"], suf=SUFFIX)
BAM = expand("result/2_bam/{samples}_Aligned.sortedByCoord.out.bam", samples=config["SampleList"])

rule all:
    input:
        TRIM1 + TRIM2 + QC_trim_html + QC_trim_zip + BAM
        
##----------------------------------------##
## 1. Adapter removal & quality filtering ##
##----------------------------------------##

rule adapterremoval:
    input:
        R1 = lambda wildcards: config["SampleList"][wildcards.samples]["R1"],
        R2 = lambda wildcards: config["SampleList"][wildcards.samples]["R2"]
    output:
        R1 = "result/1_trim/{samples}_R1_trim.fastq.gz",
        R2 = "result/1_trim/{samples}_R2_trim.fastq.gz"
    params:
        trim5p = config["trim5p"],
        trimAdapt = config["trimAdapt"],
        adapter1 = config["adapter1"],
        adapter2 = config["adapter2"]
    threads: config["threads"]
    log: 'log/adapterremoval/{samples}_adapterremoval.log'
    message: "Adapter removal & quality filtering"

    run: 
        if params.trimAdapt == True:
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p} --adapter1 {params.adapter1} --adapter2 {params.adapter2}")
        if params.trimAdapt == False:
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p}")
        else:
            print("Config parameter trimAdapt must be set to True or False.")

##----------------------------------------##
## 2. Quality Control - trimmed           ##
##----------------------------------------##

rule fastqc_trim:
    input: expand('result/1_trim/{samples}_{suf}.fastq.gz', samples=config["SampleList"], suf=SUFFIX)
    output:
        HTML = expand('result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.html', samples=config["SampleList"], suf=SUFFIX),
        ZIP = expand('result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.zip', samples=config["SampleList"], suf=SUFFIX)
    threads: config["threads"]
    message: "Quality assessment, FastQC"
    log: expand('log/fastqc_trim/{samples}_{suf}_fastqc_trim.log', samples=config["SampleList"], suf=SUFFIX)
    shell:
        """
        fastqc -t {threads} --outdir 'result/qc/2_fastqc_trim' {input} --quiet
        """

##----------------------------------------##
## 3. STAR ALIGNMENT                      ##
##----------------------------------------##

rule STAR_index:
    output: directory('ref/release{params.release}/STARindex')
    params:
        release = config["release"],
        indexPath = config["indexPath"]
    threads: config["threads"]
    message: "Generating genome index"
    log: 'log/STAR/STAR_index.log'
    run:
        if params.indexPath == False:
            shell("scripts/STAR_index.sh {params.release} {output} {threads}")
  
rule STAR_align:
    input:
        R1 = "result/1_trim/{samples}_R1_trim.fastq.gz",
        R2 = "result/1_trim/{samples}_R2_trim.fastq.gz",
        IDX = rules.STAR_index.output
    output: 'result/2_bam/{samples}_Aligned.sortedByCoord.out.bam'
    params:
        OUT = 'result/2_bam/{samples}_',
        indexPath = config["indexPath"]
    threads: config["threads"]
    message: 'Aligning reads'
    log: 'log/STAR/{samples}_STAR_align.log'
    run:
        if params.indexPath == False:
            shell("STAR --genomeDir {input.IDX} --readFilesIn {input.R1} {input.R2} --readFilesCommand zcat --outFileNamePrefix {params.OUT} --outSAMtype BAM SortedByCoordinate --runThreadN {threads} --runRNGseed 8756")
        else:
            print("STAR --genomeDir {config.indexPath} --readFilesIn {input.R1} {input.R2} --readFilesCommand zcat --outFileNamePrefix {params.OUT} --outSAMtype BAM SortedByCoordinate --runThreadN {threads} --runRNGseed 8756")

