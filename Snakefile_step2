configfile: 'config/test_config.yaml'

## INPUTS

TRIM = expand('result/2_bam/{samples}.bam', samples=config["SampleList"])
BAM = expand('result/2_bam/{samples}.bam', samples=config["SampleList"])
FLAG = expand('result/2_bam/{samples}.bam', samples=config["SampleList"])
KAL = expand('result/2_bam/{samples}.bam', samples=config["SampleList"])


rule all:
    input:
        
##----------------------------------------##
## 1. Adapter removal & quality filtering ##
##----------------------------------------##

rule adapterremoval:
    input:
        R1 = lambda wildcards: config["SampleList"][wildcards.samples]["R1"],
        R2 = lambda wildcards: config["SampleList"][wildcards.samples]["R2"]
    output:
        R1 = "result/1_trim/{samples}_R1_trim.fastq.gz",
        R2 = "result/1_trim/{samples}_R2_trim.fastq.gz"
    params:
        trim5p = config["trim5p"],
        trimAdapt = config["trimAdapt"],
        adapter1 = config["adapter1"],
        adapter2 = config["adapter2"]
    threads: config["threads"]
    log: 'log/adapterremoval.log'
    message: "Adapter removal & quality filtering"

    run: 
        if params.trimAdapt == "yes":
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p} --adapter1 {params.adapter1} --adapter2 {params.adapter2}")
        if params.trimAdapt == "no":
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p}")
        else:
            print("Config parameter trimAdapt must be set to True or False.")

