configfile: 'result/config.yaml'

## INPUTS / OUTPUTS
TRIM1 = expand('result/1_trim/{samples}_R1_trim.fastq.gz', samples=config["SampleList"])
TRIM2 = expand('result/1_trim/{samples}_R2_trim.fastq.gz', samples=config["SampleList"])
SUFFIX = ["R1_trim", "R2_trim"]
QC_trim_html = expand("result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.html", samples=config["SampleList"], suf=SUFFIX)
QC_trim_zip = expand("result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.zip", samples=config["SampleList"], suf=SUFFIX)
BAM = expand("result/2_bam/{samples}_Aligned.sortedByCoord.out.bam", samples=config["SampleList"])
BAM2 = expand("result/3_bam_filter/{samples}_Aligned.sortedByCoord.filter.bam", samples=config["SampleList"])
FLAGSTAT = expand("result/qc/3_flagstat/{samples}_flagstat.tsv", samples=config["SampleList"])
PICARD = expand("result/qc/4_picard/{samples}_picard.tsv", samples=config["SampleList"])
COUNT = expand("result/4_count/{samples}_feature_counts.tsv", samples=config["SampleList"])
COUNT_all = "result/4_count/combined_feature_counts.tsv"

rule all:
    input:
        TRIM1 + TRIM2 + QC_trim_html + QC_trim_zip + BAM + BAM2 + FLAGSTAT + PICARD + COUNT,
        COUNT_all
        
##----------------------------------------##
## 1. Adapter removal & quality filtering ##
##----------------------------------------##

rule adapterremoval:
    input:
        R1 = lambda wildcards: config["SampleList"][wildcards.samples]["R1"],
        R2 = lambda wildcards: config["SampleList"][wildcards.samples]["R2"]
    output:
        R1 = "result/1_trim/{samples}_R1_trim.fastq.gz",
        R2 = "result/1_trim/{samples}_R2_trim.fastq.gz",
        single = "result/1_trim/{samples}_singleton.truncated.gz",
        discard = "result/1_trim/{samples}.settings",
        set = "result/1_trim/{samples}_discarded.gz"
    params:
        trim5p = config["trim5p"],
        trimAdapt = config["trimAdapt"],
        adapter1 = config["adapter1"],
        adapter2 = config["adapter2"]
    threads: config["threads"]
    message: "Adapter removal & quality filtering"

    run: 
        if params.trimAdapt == True:
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --singleton {output.single} --discarded {output.discard} --settings {output.set} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p} --adapter1 {params.adapter1} --adapter2 {params.adapter2}")
        if params.trimAdapt == False:
            shell("AdapterRemoval --file1 {input.R1} --file2 {input.R2} --output1 {output.R1} --output2 {output.R2} --singleton {output.single} --discarded {output.discard} --settings {output.set} --threads {threads} --gzip --maxns 1 --minlength 15 --trimqualities --minquality 30 --trim5p {params.trim5p}")
        else:
            print("Config parameter trimAdapt must be set to True or False.")

##----------------------------------------##
## 2. Quality Control - trimmed           ##
##----------------------------------------##

rule fastqc_trim:
    input: expand('result/1_trim/{samples}_{suf}.fastq.gz', samples=config["SampleList"], suf=SUFFIX)
    output:
        HTML = expand('result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.html', samples=config["SampleList"], suf=SUFFIX),
        ZIP = expand('result/qc/2_fastqc_trim/{samples}_{suf}_fastqc.zip', samples=config["SampleList"], suf=SUFFIX)
    threads: config["threads"]
    message: "Quality assessment, FastQC"
    shell:
        """
        fastqc -t {threads} --outdir 'result/qc/2_fastqc_trim' {input} --quiet
        """

##----------------------------------------##
## 3. STAR ALIGNMENT                      ##
##----------------------------------------##

rule STAR_index:
    output: directory(expand('ref/release{release}/STARindex', release=config["release"]))
    params:
        release = config["release"]
    threads: config["threads"]
    message: "Generating genome index"
    run:
        shell("scripts/STAR_index.sh {params.release} {threads}")
  
rule STAR_align:
    input:
        R1 = "result/1_trim/{samples}_R1_trim.fastq.gz",
        R2 = "result/1_trim/{samples}_R2_trim.fastq.gz",
        IDX = rules.STAR_index.output
    output: 'result/2_bam/{samples}_Aligned.sortedByCoord.out.bam'
    params:
        OUT = 'result/2_bam/{samples}_'
    threads: config["threads"]
    message: 'Aligning reads'
    run:
        shell("STAR --genomeDir {input.IDX} --readFilesIn {input.R1} {input.R2} --readFilesCommand zcat --outFileNamePrefix {params.OUT} --outSAMtype BAM SortedByCoordinate --runThreadN {threads} --runRNGseed 8756")

##----------------------------------------##
## 4. ALIGNMENT FILTERING                 ##
##----------------------------------------##

rule align_filter:
    input: 'result/2_bam/{samples}_Aligned.sortedByCoord.out.bam'
    output: 'result/3_bam_filter/{samples}_Aligned.sortedByCoord.filter.bam'
    threads: config["threads"]
    message: "Filtering alignments"
    run:
        shell("samtools view {input} -h -f 3 -F 1284 -q 30 -@ {threads} > {output}")

##----------------------------------------##
## 5. ALIGNMENT QC                        ##
##----------------------------------------##

rule flagstat:
    input: 'result/3_bam_filter/{samples}_Aligned.sortedByCoord.filter.bam'
    output: 'result/qc/3_flagstat/{samples}_flagstat.tsv'
    threads: config["threads"]
    message: "Quality control, flagstat"
    run:
        shell("samtools flagstat -@ {threads} {input} > {output}")

rule picard:
    input: 'result/3_bam_filter/{samples}_Aligned.sortedByCoord.filter.bam'
    output: 'result/qc/4_picard/{samples}_picard.tsv'
    threads: config["threads"]
    params:
        picard = config["picard"]
    message: "Quality control, Picard"
    run:
        if params.picard == True:
            shell("scripts/picard.sh {input} {output}")
        else:
            print("Picard not run. Change config picard parameter to True if you would like this output.")

##----------------------------------------##
## 6. FEATURE COUNTS                      ##
##----------------------------------------##

rule fcount:
    input:
        bam = 'result/3_bam_filter/{samples}_Aligned.sortedByCoord.filter.bam',
        gtf =  'ref/release' + config["release"] + '/STARref/Homo_sapiens.GRCh38.' + config["release"] + '.gtf'
    output: 'result/4_count/{samples}_feature_counts.tsv'
    threads: config["threads"]
    message: "Counting features"
    run:
        shell("featureCounts -T {threads} -g gene_id -t exon -p \
          -a {input.gtf} -o {output} {input.bam}")

##----------------------------------------##
## 7. COMBINE SAMPLES                     ##
##----------------------------------------##

rule combine:
    input:
        count = 'result/4_count/{samples}_feature_counts.tsv',
        flagstat = 'result/qc/3_flagstat/{samples}_flagstat.tsv',
        picard = 'result/qc/4_picard/{samples}_picard.tsv'
    output:
        'result/4_count/combined_feature_counts.tsv'
    threads: config["threads"]
    message: "Combining samples"
    benchmark: 'log/fcount/combine.benchmark.txt'
    run:
        shell("python scripts/combine_samples.py")
